// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_IV.Data;

#nullable disable

namespace Project_IV.Migrations
{
    [DbContext(typeof(GitCommitDbContext))]
    [Migration("20250322185100_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Project_IV.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("gender", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_data");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("uploaded_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("like_id");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("liked_at");

                    b.Property<int>("LikedId")
                        .HasColumnType("int")
                        .HasColumnName("liked_id");

                    b.Property<int>("LikerId")
                        .HasColumnType("int")
                        .HasColumnName("liker_id");

                    b.HasKey("LikeId");

                    b.HasIndex("LikedId");

                    b.HasIndex("LikerId");

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<DateTime>("MatchedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("matched_at");

                    b.Property<int>("User1Id")
                        .HasColumnType("int")
                        .HasColumnName("user1_id");

                    b.Property<int>("User2Id")
                        .HasColumnType("int")
                        .HasColumnName("user2_id");

                    b.HasKey("MatchId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("preference_id");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("gender_id");

                    b.Property<int>("MaxAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100)
                        .HasColumnName("max_age");

                    b.Property<int>("MinAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(18)
                        .HasColumnName("min_age");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PreferenceId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("preferences", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("gender_id");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StateId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Project_IV.Entities.Image", b =>
                {
                    b.HasOne("Project_IV.Entities.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_IV.Entities.Like", b =>
                {
                    b.HasOne("Project_IV.Entities.User", "Liked")
                        .WithMany("LikesReceived")
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_IV.Entities.User", "Liker")
                        .WithMany("LikesGiven")
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Liked");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("Project_IV.Entities.Match", b =>
                {
                    b.HasOne("Project_IV.Entities.User", "User1")
                        .WithMany("MatchesAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_IV.Entities.User", "User2")
                        .WithMany("MatchesAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Project_IV.Entities.Preference", b =>
                {
                    b.HasOne("Project_IV.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Project_IV.Entities.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_IV.Entities.User", b =>
                {
                    b.HasOne("Project_IV.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Project_IV.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Project_IV.Entities.User", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("LikesGiven");

                    b.Navigation("LikesReceived");

                    b.Navigation("MatchesAsUser1");

                    b.Navigation("MatchesAsUser2");

                    b.Navigation("Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
